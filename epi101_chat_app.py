
import streamlit as st
import openai

st.set_page_config(page_title="Epidemiolog√≠a 101", page_icon="üß™", layout="wide")

# Estilo personalizado
st.markdown("""
    <style>
    body {
        background-color: #f4f6f9;
    }
    .block-container {
        padding-top: 2rem;
    }
    .title {
        font-size: 2.8em;
        font-weight: bold;
        color: #2c3e50;
    }
    .subtitle {
        font-size: 1.2em;
        color: #34495e;
        margin-bottom: 2rem;
    }
    </style>
""", unsafe_allow_html=True)

st.markdown('<div class="title">üß† Epidemiolog√≠a 101 - Asistente educativo</div>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">ü§ì Creado por Yolanda Muvdi. Aprende conceptos clave de epidemiolog√≠a de forma clara, pro y con flow acad√©mico internacional.</div>', unsafe_allow_html=True)

# Verifica que la clave est√© presente
if "OPENAI_API_KEY" in st.secrets:
    openai.api_key = st.secrets["OPENAI_API_KEY"]
    st.success("‚úÖ Clave API detectada correctamente.")
else:
    st.error("‚ùå No se encontr√≥ OPENAI_API_KEY. Ve al panel de Secrets en Streamlit Cloud y agr√©gala.")
    st.stop()

# Inicializa el historial
if "messages" not in st.session_state:
    st.session_state["messages"] = [{
        "role": "system",
        "content": "Eres un profesor universitario experto en epidemiolog√≠a con vocaci√≥n pedag√≥gica. Tu tarea es explicar conceptos clave de epidemiolog√≠a (tasas, medidas de asociaci√≥n, dise√±os de estudio, sesgos, interpretaci√≥n de resultados), resolver ejercicios y generar recursos educativos adaptados al nivel del usuario. Este GPT se llama 'Epidemiolog√≠a 101' y fue creado por Yolanda Muvdi."
    }]

# Mostrar historial
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# Entrada del usuario
if prompt := st.chat_input("Haz tu pregunta de epidemiolog√≠a..."):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    with st.chat_message("assistant"):
        try:
            response = openai.ChatCompletion.create(
                model="gpt-3.5-turbo",
                messages=st.session_state.messages
            )
            reply = response.choices[0].message.content
            st.markdown(reply)
            st.session_state.messages.append({"role": "assistant", "content": reply})
        except Exception as e:
            st.error(f"‚ùå Error al generar respuesta: {e}")
