
import streamlit as st
import openai

st.set_page_config(page_title="Epidemiolog√≠a 101", page_icon="üß™", layout="wide")

# Estilos visuales con flow
st.markdown("""
    <style>
    body, .block-container {
        background: linear-gradient(135deg, #f0f4f8 0%, #d9e2ec 100%);
        color: #1b2838;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .block-container {
        padding: 2rem 4rem 3rem 4rem;
        max-width: 1100px;
        margin: auto;
        background: white;
        border-radius: 12px;
        box-shadow: 0 10px 25px rgba(0,0,0,0.1);
    }

    .title {
        font-size: 3rem;
        font-weight: 900;
        color: #0d3b66;
        margin-bottom: 0.2rem;
    }

    .subtitle {
        font-size: 1.3rem;
        color: #3e5c76;
        margin-bottom: 2rem;
        font-weight: 500;
    }

    div[data-testid="stChatMessage"] {
        border-radius: 12px;
        padding: 12px 18px;
        margin-bottom: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.08);
        font-size: 1rem;
        line-height: 1.5;
    }

    .stTextInput > div > input {
        border-radius: 10px !important;
        border: 1.5px solid #0d3b66 !important;
        padding: 12px 16px !important;
        font-size: 1rem !important;
    }
    </style>
""", unsafe_allow_html=True)

# Cabecera
st.markdown('<div class="title">üß† Epidemiolog√≠a 101 - Asistente educativo</div>', unsafe_allow_html=True)
st.markdown('<div class="subtitle">Desarrollado por Yolanda Muvdi, Enfermera Epidemi√≥loga. Plataforma de formaci√≥n en conceptos clave de epidemiolog√≠a y salud p√∫blica, con enfoque pedag√≥gico y base cient√≠fica s√≥lida.</div>', unsafe_allow_html=True)

# Verificaci√≥n de API
if "OPENAI_API_KEY" in st.secrets:
    openai.api_key = st.secrets["OPENAI_API_KEY"]
    st.success("‚úÖ Clave API detectada correctamente.")
else:
    st.error("‚ùå No se encontr√≥ OPENAI_API_KEY. Ve al panel de Secrets en Streamlit Cloud y agr√©gala.")
    st.stop()

# Pesta√±as de contenido
tabs = st.tabs([
    "Conceptos B√°sicos",
    "Medidas de Asociaci√≥n",
    "Dise√±os de Estudio",
    "Sesgos y Errores",
    "Chat"
])

with tabs[0]:
    st.header("üìå Conceptos B√°sicos de Epidemiolog√≠a")
    st.markdown("""
    - **Epidemiolog√≠a:** Ciencia que estudia la distribuci√≥n y los determinantes de los eventos de salud en poblaciones.
    - **Poblaci√≥n:** Conjunto de individuos que comparten una caracter√≠stica en com√∫n (ej: edad, lugar de residencia).
    - **Evento de inter√©s:** Enfermedad, condici√≥n o suceso relacionado con la salud (ej: diabetes, COVID-19, mortalidad).
    - **Frecuencia:** Cu√°ntas veces ocurre un evento en un grupo.
    - **Tasa:** Medida que relaciona frecuencia con tiempo.
    - **Prevalencia:** Proporci√≥n de individuos que tienen una enfermedad en un momento dado.
    - **Incidencia:** N√∫mero de casos nuevos de una enfermedad en un periodo espec√≠fico.
    """)

with tabs[1]:
    st.header("üìà Medidas de Asociaci√≥n")
    st.markdown("""
    - **Riesgo Relativo (RR):** Compara el riesgo de enfermar entre dos grupos.
      - RR > 1: mayor riesgo en el grupo expuesto
      - RR < 1: el factor puede ser protector
    - **Raz√≥n de Momios (OR):** Se usa en estudios de casos y controles.
    - **Reducci√≥n del Riesgo Absoluto (RRA):** Diferencia entre dos tasas de incidencia.
    - **N√∫mero Necesario a Tratar (NNT):** Cu√°ntas personas necesitas tratar para prevenir un caso.
    - **Interpretaci√≥n:** Si OR = 2, el grupo expuesto tiene el doble de probabilidad de presentar el evento.
    """)

with tabs[2]:
    st.header("üìä Dise√±os de Estudio Epidemiol√≥gico")
    st.markdown("""
    - **Estudio Transversal:** Se mide exposici√≥n y enfermedad al mismo tiempo. √ötil para prevalencia.
    - **Estudio de Casos y Controles:** Compara un grupo con la enfermedad vs. uno sin ella. Calcula OR.
    - **Estudio de Cohorte:** Sigue a personas expuestas y no expuestas en el tiempo. Calcula RR.
    - **Ensayo Cl√≠nico:** Intervenci√≥n controlada para probar tratamientos. Alta validez interna.
    - **Ecol√≥gicos:** Comparan poblaciones, no individuos.
    """)

with tabs[3]:
    st.header("‚ö†Ô∏è Sesgos y Errores")
    st.markdown("""
    - **Sesgo:** Error sistem√°tico que afecta la validez de los resultados.
        - **Sesgo de selecci√≥n:** Diferencias entre quienes entran o no al estudio.
        - **Sesgo de informaci√≥n:** Errores en la medici√≥n o recolecci√≥n de datos.
        - **Sesgo de memoria (recall bias):** Frecuente en estudios de casos y controles.
    - **Confusi√≥n:** Otro factor que afecta la asociaci√≥n observada.
    - **Errores aleatorios:** Se minimizan aumentando el tama√±o de muestra.
    - **Control del sesgo:** Aleatorizaci√≥n, enmascaramiento, ajustes estad√≠sticos.
    """)

with tabs[4]:
    st.header("üí¨ Chat con Epidemiolog√≠a 101")

    if "messages" not in st.session_state:
        st.session_state["messages"] = [{
            "role": "system",
            "content": (
                "Eres un profesor universitario experto en epidemiolog√≠a con vocaci√≥n pedag√≥gica. "
                "Tu tarea es explicar conceptos clave de epidemiolog√≠a (tasas, medidas de asociaci√≥n, "
                "dise√±os de estudio, sesgos, interpretaci√≥n de resultados), resolver ejercicios y generar recursos educativos adaptados al nivel del usuario. "
                "Este GPT se llama 'Epidemiolog√≠a 101' y fue creado por Yolanda Muvdi."
            )
        }]

    for msg in st.session_state.messages:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    if prompt := st.chat_input("Haz tu pregunta de epidemiolog√≠a..."):
        st.session_state.messages.append({"role": "user", "content": prompt})
        with st.chat_message("user"):
            st.markdown(prompt)

        with st.chat_message("assistant"):
            try:
                response = openai.chat.completions.create(
                    model="gpt-3.5-turbo",
                    messages=st.session_state.messages
                )
                reply = response.choices[0].message.content
                st.markdown(reply)
                st.session_state.messages.append({"role": "assistant", "content": reply})
            except Exception as e:
                st.error(f"Error al comunicarse con OpenAI: {e}")

